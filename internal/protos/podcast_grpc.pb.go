// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PodClient is the client API for Pod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodClient interface {
	GetPodcast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Podcast, error)
	GetEpisodes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Episodes, error)
	GetUserEpisode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserEpisode, error)
	UpdateUserEpisode(ctx context.Context, in *UserEpisodeReq, opts ...grpc.CallOption) (*Response, error)
	GetSubscriptions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Subscriptions, error)
	GetUserLastPlayed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LastPlayedRes, error)
}

type podClient struct {
	cc grpc.ClientConnInterface
}

func NewPodClient(cc grpc.ClientConnInterface) PodClient {
	return &podClient{cc}
}

func (c *podClient) GetPodcast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Podcast, error) {
	out := new(Podcast)
	err := c.cc.Invoke(ctx, "/protos.Pod/GetPodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) GetEpisodes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Episodes, error) {
	out := new(Episodes)
	err := c.cc.Invoke(ctx, "/protos.Pod/GetEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) GetUserEpisode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserEpisode, error) {
	out := new(UserEpisode)
	err := c.cc.Invoke(ctx, "/protos.Pod/GetUserEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) UpdateUserEpisode(ctx context.Context, in *UserEpisodeReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Pod/UpdateUserEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) GetSubscriptions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Subscriptions, error) {
	out := new(Subscriptions)
	err := c.cc.Invoke(ctx, "/protos.Pod/GetSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) GetUserLastPlayed(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LastPlayedRes, error) {
	out := new(LastPlayedRes)
	err := c.cc.Invoke(ctx, "/protos.Pod/GetUserLastPlayed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServer is the server API for Pod service.
// All implementations must embed UnimplementedPodServer
// for forward compatibility
type PodServer interface {
	GetPodcast(context.Context, *Request) (*Podcast, error)
	GetEpisodes(context.Context, *Request) (*Episodes, error)
	GetUserEpisode(context.Context, *Request) (*UserEpisode, error)
	UpdateUserEpisode(context.Context, *UserEpisodeReq) (*Response, error)
	GetSubscriptions(context.Context, *Request) (*Subscriptions, error)
	GetUserLastPlayed(context.Context, *Request) (*LastPlayedRes, error)
	mustEmbedUnimplementedPodServer()
}

// UnimplementedPodServer must be embedded to have forward compatible implementations.
type UnimplementedPodServer struct {
}

func (UnimplementedPodServer) GetPodcast(context.Context, *Request) (*Podcast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodcast not implemented")
}
func (UnimplementedPodServer) GetEpisodes(context.Context, *Request) (*Episodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisodes not implemented")
}
func (UnimplementedPodServer) GetUserEpisode(context.Context, *Request) (*UserEpisode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEpisode not implemented")
}
func (UnimplementedPodServer) UpdateUserEpisode(context.Context, *UserEpisodeReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEpisode not implemented")
}
func (UnimplementedPodServer) GetSubscriptions(context.Context, *Request) (*Subscriptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedPodServer) GetUserLastPlayed(context.Context, *Request) (*LastPlayedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLastPlayed not implemented")
}
func (UnimplementedPodServer) mustEmbedUnimplementedPodServer() {}

// UnsafePodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServer will
// result in compilation errors.
type UnsafePodServer interface {
	mustEmbedUnimplementedPodServer()
}

func RegisterPodServer(s *grpc.Server, srv PodServer) {
	s.RegisterService(&_Pod_serviceDesc, srv)
}

func _Pod_GetPodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).GetPodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pod/GetPodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).GetPodcast(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_GetEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).GetEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pod/GetEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).GetEpisodes(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_GetUserEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).GetUserEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pod/GetUserEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).GetUserEpisode(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_UpdateUserEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEpisodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).UpdateUserEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pod/UpdateUserEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).UpdateUserEpisode(ctx, req.(*UserEpisodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pod/GetSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).GetSubscriptions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_GetUserLastPlayed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).GetUserLastPlayed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pod/GetUserLastPlayed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).GetUserLastPlayed(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pod_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Pod",
	HandlerType: (*PodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodcast",
			Handler:    _Pod_GetPodcast_Handler,
		},
		{
			MethodName: "GetEpisodes",
			Handler:    _Pod_GetEpisodes_Handler,
		},
		{
			MethodName: "GetUserEpisode",
			Handler:    _Pod_GetUserEpisode_Handler,
		},
		{
			MethodName: "UpdateUserEpisode",
			Handler:    _Pod_UpdateUserEpisode_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _Pod_GetSubscriptions_Handler,
		},
		{
			MethodName: "GetUserLastPlayed",
			Handler:    _Pod_GetUserLastPlayed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podcast.proto",
}
